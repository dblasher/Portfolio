{"version":3,"sources":["layouts/About.js","layouts/NavBar.js","layouts/Footer.js","App.js","serviceWorker.js","index.js","layouts/Daniel.jpg"],"names":["About","react_default","a","createElement","index_es","src","Daniel","style","width","height","margin","justifyContent","variant","component","Component","TabContainer","props","padding","children","NavBar","state","value","handleChange","event","_this","setState","this","flexGrow","position","color","onChange","label","href","layouts_About","React","Footer","display","App","className","layouts_NavBar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"iSAmBeA,mLAbP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAOC,IAAQC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,OAAQ,OAAQC,eAAe,YACxFV,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYQ,QAAQ,KAAKC,UAAU,MAAnC,mBAGAZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYS,UAAU,KAAtB,kEARIC,aCEpB,SAASC,EAAaC,GAClB,OACIf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYS,UAAU,MAAMN,MAAO,CAAEU,QAAS,KACzCD,EAAME,cA0CJC,6MAhCXC,MAAQ,CACJC,MAAO,KAGXC,aAAe,SAACC,EAAOF,GACnBG,EAAKC,SAAS,CAAEJ,mFAEX,IACGA,EAAUK,KAAKN,MAAfC,MAER,OACIpB,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAAEoB,SAAU,IACpB1B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQwB,SAAS,UACb3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYQ,QAAQ,QAAQiB,MAAM,WAAlC,kBAGA5B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMiB,MAAOA,EAAOS,SAAUJ,KAAKJ,cAC/BrB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2B,MAAM,UACX9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2B,MAAM,aACX9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK2B,MAAM,UAAUC,KAAK,mBAK3B,IAAVX,GAAepB,EAAAC,EAAAC,cAAC8B,EAAD,MACL,IAAVZ,GAAepB,EAAAC,EAAAC,cAACY,EAAD,iBACL,IAAVM,GAAepB,EAAAC,EAAAC,cAACY,EAAD,wBA5BXmB,IAAMpB,WChBZqB,EAAA,SAAAnB,GAAK,OAChBf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAII,MAAQ,CAAC6B,QAAS,OAAQzB,eAAgB,WAA9C,6BCeO0B,2LAXX,OACEpC,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACgC,EAAD,cAPUrB,cCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCE3HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b5a27b5d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Paper, Avatar, Typography } from '@material-ui/core';\r\nimport Daniel from './Daniel.jpg';\r\n\r\nclass About extends Component {\r\n    render() {\r\n        return (\r\n            <Paper>\r\n                <Avatar src = {Daniel} style={{ width: 180, height: 180, margin: \"auto\", justifyContent:\"center\"}}/>\r\n                <Typography variant=\"h5\" component=\"h3\">\r\n                    Hi, I'm Daniel.\r\n                </Typography>\r\n                <Typography component=\"p\">\r\n          I can't wait to tell you all about myself. Stay Tuned!\r\n        </Typography>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\nexport default About;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AppBar, Toolbar, Typography, Tabs, Tab } from '@material-ui/core';\r\nimport About from './About';\r\n\r\n\r\nfunction TabContainer(props) {\r\n    return (\r\n        <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n            {props.children}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabContainer.propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nclass NavBar extends React.Component {\r\n    state = {\r\n        value: 0,\r\n    };\r\n\r\n    handleChange = (event, value) => {\r\n        this.setState({ value });\r\n    };\r\n    render() {\r\n        const { value } = this.state;\r\n\r\n        return (\r\n            <div style={{ flexGrow: 1 }}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"title\" color=\"inherit\">\r\n                            Daniel Blasher\r\n                </Typography>\r\n                        <Tabs value={value} onChange={this.handleChange}>\r\n                            <Tab label=\"About\" />\r\n                            <Tab label=\"Projects\" />\r\n                            <Tab label=\"Contact\" href=\"#basic-tabs\" />\r\n                        </Tabs>\r\n\r\n                    </Toolbar>\r\n                </AppBar>\r\n                {value === 0 && <About/>}\r\n                {value === 1 && <TabContainer>Projects</TabContainer>}\r\n                {value === 2 && <TabContainer>Contact</TabContainer>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default NavBar;","import React from 'react'\r\n\r\nexport default props =>\r\n    <div>\r\n        <h3 style ={{display: 'flex', justifyContent: 'center'}}>Site under Construction</h3>\r\n    </div>","import React, { Component } from 'react';\nimport { NavBar, Footer } from './layouts';\nimport './App.css';\n\nclass App extends Component {\n\n  //---begin render---\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar />\n        <Footer />\n      </div>\n    );\n  }\n  //---end render---\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Daniel.c0b9efac.jpg\";"],"sourceRoot":""}